<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: .net | just ram]]></title>
  <link href="http://justinramel.com//categories/-net/atom.xml" rel="self"/>
  <link href="http://justinramel.com/"/>
  <updated>2013-01-15T21:16:06-08:00</updated>
  <id>http://justinramel.com/</id>
  <author>
    <name><![CDATA[Justin Ramel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running your tests]]></title>
    <link href="http://justinramel.com/2013/01/15/running-your-tests/"/>
    <updated>2013-01-15T20:19:00-08:00</updated>
    <id>http://justinramel.com/2013/01/15/running-your-tests</id>
    <content type="html"><![CDATA[<p>This post is part of a series:

1. [Jenkins.NET](/2012/09/17/jenkins-dot-net/)
2. [Jenkins.NET Plugins](/2012/09/20/jenkins-dot-net-plugins/)
3. [Setup Jenkins.NET](/2012/10/09/setup-jenkins-dot-net/)
4. [Setting up your first job](/2012/10/20/jenkins-dot-net-setting-up-your-first-job/)
5. [Your first build](/2012/10/24/jenkins-dot-net-your-first-build/)
6. [Breaking the build](/2013/01/14/breaking-the-build/)
7. [Diagnosing and fixing a broken build](/2013/01/14/diagnosing-and-fixing-a-broken-build/)
8. [Monitoring your build](/2013/01/14/monitoring-your-build/)
9. [Running your tests](/2013/01/15/running-your-tests/)
10. Code Analysis

---
</p>

<p>After building your solution the next task you’ll want to automate is the
running of your tests. Jenkins comes with a multitude of test plugins so
whatever test framework you’re using chances are you’ll be covered. To show how
easy it is to add tests to a build we’ll add NUnit to our demo solution and
have Jenkins run the tests every time we commit a change to the source
repository.</p>

<h3 id="test-project-structure">Test Project Structure</h3>

<p>Structure of the demo project is:</p>

<p>Tools\NUnit\bin contains the NUnit framework and runner.</p>

<p>The DemoTest project references the nunit.framework.dll from this folder. This
enables the solution to be checked out and run with out any pre-installation
requirements. This work great for Jenkins but its also a great way to setup
your solutions, if you need to move to a new machine or if you have a new
starter you just check out the solution and its ready to build and run your
tests.</p>

<h3 id="execute-any-test-runner">Execute any test runner</h3>

<p>The build step “Execute Windows batch command” works with any test runner that
has a command line runner. We will use this method to run the NUnit command
line test runner in the Demo project.</p>

<p>Use the Demo » Configure link to access the configuration page, under the
Build section click the “Add build step” button.</p>

<p><img src="/images/jenkins-net/ch09/test-1.png" alt="test 1" /></p>

<p>Select the “Execute Windows batch command” to add a new build step.</p>

<p><img src="/images/jenkins-net/ch09/test-2.png" alt="test 2" /></p>

<p>Under the “Execute Windows batch command” section enter the command:</p>

<ul>
  <li>
    <p>Tools\nunit\bin\nunit-console.exe src\DemoTests\bin\Debug\DemoTests.dll</p>
  </li>
  <li>
    <p>Click the “Save” button</p>
  </li>
</ul>

<p>This command is telling Jenkins the location of the NUnit test runner
(Tools\nunit\bin\nunit-console.exe) and the location of the test DLL to run
against (src\DemoTests\bin\Debug\DemoTests.dll).</p>

<p>This command will now execute the NUnit test runner after every solution build.</p>

<h3 id="failing-tests">Failing Tests</h3>

<p>When a test fails Jenkins will fail the build and show a red ball for the
status of the project.</p>

<p><img src="/images/jenkins-net/ch09/test-3.png" alt="test 3" /></p>

<p>Now we know the build has failed but we don’t want to start digging through the
console output to find the details of the failing test. Lets introduce another
Jenkins plugin which will show details of exactly which test failed and why.</p>

<h3 id="plugin-setup">Plugin Setup</h3>

<p>Use the Demo » Configure link to access the Demo jobs configuration page,
under the Post-Build Actions section.</p>

<p><img src="/images/jenkins-net/ch09/test-4.png" alt="test 4" /></p>

<ul>
  <li>
    <p>Tick the “Publish NUnit test result report” check box.</p>
  </li>
  <li>
    <p>Enter the output of the NUnit test runner: TestResult.xml</p>
  </li>
  <li>
    <p>Click the “Save” button.</p>
  </li>
</ul>

<p>Run a build again to see the NUnit test report.</p>

<ul>
  <li>Click the Demo » Build Now link.</li>
</ul>

<p>Of course the build has failed again but that’s what we want. This allows us to
see NUnit test report. To view the report click on the failed build in the
Build History.</p>

<p><img src="/images/jenkins-net/ch09/test-5.png" alt="test 5" /></p>

<p>We now have a Test Result area that is showing 1 failure in the
DemoTests.ProgramTests.Add namespace. That’s certainly easier than digging
through the console output. The benefits don’t end there, if you click on the
Test Result link we will get a more detailed report.</p>

<p><img src="/images/jenkins-net/ch09/test-6.png" alt="test 6" /></p>

<p>Here we get a pretty report showing the full details of the failure. We can
drill down for even more detail using the link DemoTests.ProgramTests.Add.</p>

<p><img src="/images/jenkins-net/ch09/test-7.png" alt="test 7" /></p>

<p>This gives the error message from the test, a stack trace, the filename of the
failing test and even the line number. You can’t ask for much more than that
but there is one more benefit we can eke out of our test runner and that is our
test history.</p>

<h3 id="test-history">Test History</h3>

<p>Once you setup the Unit plugin, Jenkins will track all your test results. This
is a great way to keep an eye on the general health of your project. I’ve added
a few more tests and commits to the demo project to show how the test history
works.</p>

<p><img src="/images/jenkins-net/ch09/test-8.png" alt="test 8" /></p>

<p>As you can see the Demo home page now has a “Test Result Trend” graph showing
the initial failing test, followed by anther commit to fix the failure then
another 4 tests that were added. The graph shows at a glance that our Demo
project is getting healthier on every commit. This is the type of graph we want
to see in our projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring your build]]></title>
    <link href="http://justinramel.com/2013/01/14/monitoring-your-build/"/>
    <updated>2013-01-14T22:28:00-08:00</updated>
    <id>http://justinramel.com/2013/01/14/monitoring-your-build</id>
    <content type="html"><![CDATA[<p>This post is part of a series:

1. [Jenkins.NET](/2012/09/17/jenkins-dot-net/)
2. [Jenkins.NET Plugins](/2012/09/20/jenkins-dot-net-plugins/)
3. [Setup Jenkins.NET](/2012/10/09/setup-jenkins-dot-net/)
4. [Setting up your first job](/2012/10/20/jenkins-dot-net-setting-up-your-first-job/)
5. [Your first build](/2012/10/24/jenkins-dot-net-your-first-build/)
6. [Breaking the build](/2013/01/14/breaking-the-build/)
7. [Diagnosing and fixing a broken build](/2013/01/14/diagnosing-and-fixing-a-broken-build/)
8. [Monitoring your build](/2013/01/14/monitoring-your-build/)
9. [Running your tests](/2013/01/15/running-your-tests/)
10. Code Analysis

---
</p>

<p>Unless you’re a glutton for punishment manually checking Jenkins after every
build is going to become very old very quickly. Luckily Jenkins has several
notification mechanisms to save you this manual task.</p>

<h3 id="email-notification">Email Notification</h3>

<p>We can setup Jenkins to send an email notification whenever a build fails this
save us having to check the server after every build, we can trust Jenkins to
email us on failure. Jenkins will also send a notification email when the build
returns to a working state.</p>

<p>Setting up email notification is a two-step process. First we give Jenkins
details of the email server and second we set which email addresses to notify
upon failure of a build.</p>

<h3 id="email-server-configuration">Email Server Configuration</h3>

<p>Email server configuration is done via the Configure System page. You get to
the configuration page from the main Jenkins home page Manage Jenkins »
Configure System. At the bottom of this page is the E-mail Notification
section.</p>

<p><img src="/images/jenkins-net/ch08/email-setup.png" alt="email setup" /></p>

<p>Chances are you’ll have a local SMTP server, if not you can use something like
the Gmail SMTP server as shown here. Make sure you tick the “Test configuration
by sending test e-mail” check box and then click the “Test Configuration”
button to have Jenkins send you a test email, confirming your configuration is
OK. Once you’ve successfully received an email don’t forget to click the “Save”
button to save your changes.</p>

<h3 id="project-notification-email">Project Notification Email</h3>

<p>Once you have the email server configured you can specify per project who to
notify when a build fails. This is accessed via each Jobs configuration page,
for our Demo job we click Jenkins » Demo » Configure. At the bottom of this
page under the Post-Build Actions section is the E-mail Notification area.</p>

<p><img src="/images/jenkins-net/ch08/email-notification.png" alt="email notification" /></p>

<ul>
  <li>Tick the “E-mail Notification” checkbox.</li>
  <li>Enter a space-separated list of email address to notify when a build fails.</li>
  <li>Tick the “Send e-mail for every unstable build” checkbox.</li>
</ul>

<p>If you really want to annoy the person who broke the build you can send them
another email by ticking the “Send separate e-mails to individuals who broke
the build” checkbox.</p>

<p>Finally don’t forget to click the “Save” button.</p>

<p>Unfortunately the only way to test this is working is to break the build,
follow the instructions in section 6. <a href="/2013/01/14/breaking-the-build/">Breaking the
build</a> to test email notification is working.</p>

<h3 id="your-constant-reminder">Your constant reminder</h3>

<p>Email notification is great but I also like to have a constant reminder of the
current build status. The best way I have found to do this on Windows is by
using the Hudson Tray Tracker (read Jenkins Tray Tracker), which is available
to download from
<a href="http://code.google.com/p/hudson-tray-tracker/">http://code.google.com/p/hudson-tray-tracker/</a>.</p>

<p><img src="/images/jenkins-net/ch08/tray-1.png" alt="tray tracker 1" /></p>

<p>Once you download and install Hudson Tray Tracker you get a tray notification
icon showing a constant reminder of the current build status. Initially the
tray icon will be grey until you point it at a Jenkins build server.</p>

<p><img src="/images/jenkins-net/ch08/tray-2.png" alt="tray tracker 2" /></p>

<ul>
  <li>
    <p>Right click on the tray icon to access the context menu.</p>
  </li>
  <li>
    <p>Click Settings to configure the software.</p>
  </li>
</ul>

<p><img src="/images/jenkins-net/ch08/tray-3.png" alt="tray tracker 3" /></p>

<ul>
  <li>Click the “Add server” button.</li>
</ul>

<p><img src="/images/jenkins-net/ch08/tray-4.png" alt="tray tracker 4" /></p>

<ul>
  <li>
    <p>Enter the URL and port of your Jenkins server.</p>
  </li>
  <li>
    <p>Click the “OK” button.</p>
  </li>
</ul>

<p>You will now see a list of projects on the Jenkins server.</p>

<p><img src="/images/jenkins-net/ch08/tray-5.png" alt="tray tracker 5" /></p>

<p>Tick the Projects you would like to monitor. Here there is only our demo
project but in reality you may have lots of Projects to monitor.</p>

<p><img src="/images/jenkins-net/ch08/tray-6.png" alt="tray tracker 6" /></p>

<p>Once you have a server and projects setup, the tray icon will turn green to
indicate a good build. That is assuming you have a working build. When the
build breaks the icon will turn red and show a build failed message.</p>

<p><img src="/images/jenkins-net/ch08/tray-7.png" alt="tray tracker 7" /></p>

<p>You can also use the software to open Jenkins on the build page of a Job by
double clicking on the tray icon to open the list window.</p>

<p><img src="/images/jenkins-net/ch08/tray-8.png" alt="tray tracker 8" /></p>

<p>Then double click on the Job your interested in. In this case double clicking
on the Demo line will open up Jenkins on the Demo job page.</p>

<h3 id="the-teams-constant-reminder">The teams constant reminder</h3>

<p>A large screen in the development room can be a great way to give everyone on
the team a highly visible, constant reminder of the current build status.</p>

<p>Jenkins has a Radiator View plugin that is designed specifically for this
purpose.</p>

<p><a href="https://wiki.jenkins-ci.org/display/JENKINS/Radiator+View+Plugin">https://wiki.jenkins-ci.org/display/JENKINS/Radiator+View+Plugin</a></p>

<p><img src="/images/jenkins-net/ch08/team.png" alt="team" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diagnosing and fixing a broken build]]></title>
    <link href="http://justinramel.com/2013/01/14/diagnosing-and-fixing-a-broken-build/"/>
    <updated>2013-01-14T20:39:00-08:00</updated>
    <id>http://justinramel.com/2013/01/14/diagnosing-and-fixing-a-broken-build</id>
    <content type="html"><![CDATA[<p>This post is part of a series:

1. [Jenkins.NET](/2012/09/17/jenkins-dot-net/)
2. [Jenkins.NET Plugins](/2012/09/20/jenkins-dot-net-plugins/)
3. [Setup Jenkins.NET](/2012/10/09/setup-jenkins-dot-net/)
4. [Setting up your first job](/2012/10/20/jenkins-dot-net-setting-up-your-first-job/)
5. [Your first build](/2012/10/24/jenkins-dot-net-your-first-build/)
6. [Breaking the build](/2013/01/14/breaking-the-build/)
7. [Diagnosing and fixing a broken build](/2013/01/14/diagnosing-and-fixing-a-broken-build/)
8. [Monitoring your build](/2013/01/14/monitoring-your-build/)
9. [Running your tests](/2013/01/15/running-your-tests/)
10. Code Analysis

---
</p>

<p>Last time we had a failing build with Jenkin’s showing a red ball to prove it.
The first place to look when we have a failing build is the console output. You
can get to the console output via the main menu on the left of your project
page.</p>

<h3 id="console-output">Console output</h3>

<p><img src="/images/jenkins-net/ch07/console-output.png" alt="" /></p>

<p>As the screenshot shows we get all the output from our build process and there
is a lot of it! I’ve highlighted the actual problem which is the causing the
build to fail, our missing dll.</p>

<p>This is the error your team mates will see when they check out and try to build
your code.</p>

<h3 id="console-blindness">Console “blindness”</h3>

<p>When you first see the console output for your build it can be a little
overwhelming, there is a lot of information packed into the output. Sometimes
you look at all that information and you can’t see the wood for the trees, or
the errors in all that output. I have seen people look at this output and they
are blind to the errors.</p>

<p>Of course once you get used to looking at this output it becomes easier. To
help you get over this initially a simple search to find all the errors listed
on the page can really help. Simply search for the word “error” and your
browser will help you see again.</p>

<p><img src="/images/jenkins-net/ch07/console-output-find.png" alt="" /></p>

<p>You now have only a few places to concentrate your efforts in that sea of
information.</p>

<p>To fix the problem we can simply add the missing dll and Jenkins will rebuild
the solution and we’ll be back to green balls.</p>

<p>Next time we’ll look at the different ways to monitor our build and it’s
failures.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins.NET Breaking the build]]></title>
    <link href="http://justinramel.com/2013/01/14/breaking-the-build/"/>
    <updated>2013-01-14T17:38:00-08:00</updated>
    <id>http://justinramel.com/2013/01/14/breaking-the-build</id>
    <content type="html"><![CDATA[<p>This post is part of a series:

1. [Jenkins.NET](/2012/09/17/jenkins-dot-net/)
2. [Jenkins.NET Plugins](/2012/09/20/jenkins-dot-net-plugins/)
3. [Setup Jenkins.NET](/2012/10/09/setup-jenkins-dot-net/)
4. [Setting up your first job](/2012/10/20/jenkins-dot-net-setting-up-your-first-job/)
5. [Your first build](/2012/10/24/jenkins-dot-net-your-first-build/)
6. [Breaking the build](/2013/01/14/breaking-the-build/)
7. [Diagnosing and fixing a broken build](/2013/01/14/diagnosing-and-fixing-a-broken-build/)
8. [Monitoring your build](/2013/01/14/monitoring-your-build/)
9. [Running your tests](/2013/01/15/running-your-tests/)
10. Code Analysis

---
</p>

<p>Lets break the build to see how Jenkins reacts. I’ll add a DLL to the project
then “forget” to add it to source control; unfortunately I see this problem a
lot when new developers join the team.</p>

<h3 id="i-see-red-projects">I see red projects</h3>

<p><img src="/images/jenkins-net/ch06/red-ball.png" alt="" /></p>

<p>As you can see Jenkins now shows a red ball next to the Demo project. Also
notice the slightly cloudy weather icon indicating all is not well with our
project.</p>

<h3 id="hows-the-weather">How’s the weather?</h3>

<p>Jenkins uses a weather metaphor to show at a glance how a project is doing.</p>

<table>
  <tbody>
    <tr>
      <td><img src="/images/jenkins-net/ch06/weather-1.png" alt="" /></td>
      <td>No recent builds failed</td>
    </tr>
    <tr>
      <td><img src="/images/jenkins-net/ch06/weather-2.png" alt="" /></td>
      <td>1 out of the last 5 builds failed</td>
    </tr>
    <tr>
      <td><img src="/images/jenkins-net/ch06/weather-3.png" alt="" /></td>
      <td>2 out of the last 5 builds failed</td>
    </tr>
    <tr>
      <td><img src="/images/jenkins-net/ch06/weather-4.png" alt="" /></td>
      <td>3 out of the last 5 builds failed</td>
    </tr>
    <tr>
      <td><img src="/images/jenkins-net/ch06/weather-5.png" alt="" /></td>
      <td>4 out of the last 5 builds failed</td>
    </tr>
    <tr>
      <td><img src="/images/jenkins-net/ch06/weather-6.png" alt="" /></td>
      <td>5 out of the last 5 builds failed (Yeah I know the icon is no different to 4, go figure.)</td>
    </tr>
  </tbody>
</table>

<p>Obviously we want our projects to stay sunny and avoid the bad weather so next
time we’ll discuss how to diagnose and fix a broken build.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins.NET Your first build]]></title>
    <link href="http://justinramel.com/2012/10/24/jenkins-dot-net-your-first-build/"/>
    <updated>2012-10-24T21:11:00-07:00</updated>
    <id>http://justinramel.com/2012/10/24/jenkins-dot-net-your-first-build</id>
    <content type="html"><![CDATA[<p>This post is part of a series:

1. [Jenkins.NET](/2012/09/17/jenkins-dot-net/)
2. [Jenkins.NET Plugins](/2012/09/20/jenkins-dot-net-plugins/)
3. [Setup Jenkins.NET](/2012/10/09/setup-jenkins-dot-net/)
4. [Setting up your first job](/2012/10/20/jenkins-dot-net-setting-up-your-first-job/)
5. [Your first build](/2012/10/24/jenkins-dot-net-your-first-build/)
6. [Breaking the build](/2013/01/14/breaking-the-build/)
7. [Diagnosing and fixing a broken build](/2013/01/14/diagnosing-and-fixing-a-broken-build/)
8. [Monitoring your build](/2013/01/14/monitoring-your-build/)
9. [Running your tests](/2013/01/15/running-your-tests/)
10. Code Analysis

---
</p>

<p>From the Project Demo page we created last time we can activate a Build at
will.</p>

<h3 id="build-now">Build Now</h3>

<p><img src="/images/jenkins-net/ch05/build-now.png" alt="" /></p>

<p>Click the “Build Now” link.</p>

<p>This tells Jenkins to build the Job we have just defined.</p>

<h3 id="build-history">Build History</h3>

<p><img src="/images/jenkins-net/ch05/build-history-1.png" alt="" /></p>

<p>The Build History will show the Job running. Once the build is complete you
should have your first successful build.</p>

<p><img src="/images/jenkins-net/ch05/build-history-2.png" alt="" /></p>

<p>Clicking the Build History link (in this case 19-Feb-2012 00:10:39) will take
you to the build page for the Demo Job.</p>

<h3 id="console-output">Console Output</h3>

<p>This page allows us to access all the information relevant to the build we just
ran. The area we are interested in is the Console Output this shows all the
programs that ran during the build.</p>

<p><img src="/images/jenkins-net/ch05/console-output-1.png" alt="" /></p>

<p>Click the “Console Output” link.</p>

<p><img src="/images/jenkins-net/ch05/console-output-2.png" alt="" /></p>

<p>This is the place to come whenever you are trying to debug a failing build.
Everything you need to fix the problem will usually be shown on this page.</p>

<p>As you can see this was a successful build and we can see that:</p>

<ul>
  <li>Jenkins created a workspace for the Job</li>
  <li>Ran a Subversion check out
    <ul>
      <li>Listed of all files updated</li>
    </ul>
  </li>
  <li>Ran MSBuild
    <ul>
      <li>Shows all output from MSBuild</li>
    </ul>
  </li>
  <li>Shows Success message</li>
</ul>
]]></content>
  </entry>
  
</feed>
