<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: BDD | just ram]]></title>
  <link href="http://justinramel.com//categories/bdd/atom.xml" rel="self"/>
  <link href="http://justinramel.com/"/>
  <updated>2012-10-25T00:03:25+01:00</updated>
  <id>http://justinramel.com/</id>
  <author>
    <name><![CDATA[Justin Ramel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[developwithpassion.bdd - notes]]></title>
    <link href="http://justinramel.com/2009/04/30/developwithpassionbdd-notes/"/>
    <updated>2009-04-30T19:29:37+01:00</updated>
    <id>http://justinramel.com/2009/04/30/developwithpassionbdd-notes</id>
    <content type="html"><![CDATA[<p>A few notes I’ve compiled while starting to play with <a href="http://blog.jpboodhoo.com/">JP Boodhoo's</a> BDD framework (<a href="http://github.com/developwithpassion">http://github.com/developwithpassion</a>). At first sight the syntax looks quite alien but try it for a while you eyes soon adjust.</p>

<h2>JP blog posts</h2>

<ul>
<li><p><a href="http://blog.jpboodhoo.com/HowIrsquomCurrentlyWritingMyBDDStyleTestsNdashPart1.aspx">How I’m Currently Writing My BDD Style Tests – Part 1</a></p></li>
<li><p><a href="http://blog.jpboodhoo.com/HowIrsquomCurrentlyWritingMyBDDStyleTestsNdashPart2.aspx">How I’m Currently Writing My BDD Style Tests – Part 2</a></p></li>
<li><p><a href="http://blog.jpboodhoo.com/TestExamplesWithMBUnitAndJpboodhoobdd.aspx">Test examples with MBUnit and jpboodhoo.bdd</a></p></li>
<li><p><a href="http://blog.jpboodhoo.com/SlightAdditionToJpboodhoobdd.aspx">Slight addition to jpboodhoo.bdd</a></p></li>
<li><p><a href="http://blog.jpboodhoo.com/UsingJpboodhoobddWithTestDrivenNet.aspx">Using jpboodhoo.bdd with TestDriven.Net</a></p></li>
<li><p><a href="http://blog.jpboodhoo.com/MoreNewConventionsForHowIOrganizeMyTests.aspx">More new conventions for how I organize my tests!!</a></p></li>
</ul>


<h2>Base classes</h2>

<ul>
<li><p>observations_for_a_static_sut – For testing a static class or a quick inline test</p></li>
<li><p>observations_for_a_sut_with_a_contract – For testing against the interface of a class</p>

<ul>
<li><p>sut is automatically created</p></li>
<li><p>No more broken test when you add a new dependency to a class! YAY</p></li>
<li><p>Automatic creation of sut can be over ridden</p></li>
</ul>
</li>
<li><p>observations_for_a_sut_without_a_contract – For testing against a concrete class</p></li>
</ul>


<h2>Delegate call order</h2>

<ul>
<li><p>context</p>

<ul>
<li><p>Can define a context block in the concerns base class which will be run before a context block in the inheriting class</p></li>
<li><p>Can call method provide_a_basic_sut_constructor_argument</p></li>
</ul>
</li>
<li><p>after_sut_has_been_initialized</p></li>
<li><p>because</p></li>
<li><p>it</p></li>
<li><p>after_each_observation</p></li>
</ul>


<h2>Exceptions</h2>

<p>When you want to <strike>test</strike> spec? for an exception use the doing method:</p>

<blockquote><p>because b = () =>      <br/>
doing(() => sut.MethodWhichThrows());</p>

<p>it should_throw_exception = () =>     <br/>
exception_thrown_by_the_sut.Message.should_contain("MY EXCEPTION");</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Books + Head First C# + Lab 1 Solution]]></title>
    <link href="http://justinramel.com/2008/01/03/books-head-first-c-lab-1-solution/"/>
    <updated>2008-01-03T21:52:00+00:00</updated>
    <id>http://justinramel.com/2008/01/03/books-head-first-c-lab-1-solution</id>
    <content type="html"><![CDATA[<p>I've been reading through the new Head First book <a href="http://www.amazon.com/gp/product/0596514824?ie=UTF8&amp;tag=justinramelco-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596514824">Head First C#</a><img src="http://www.assoc-amazon.com/e/ir?t=justinramelco-20&amp;l=as2&amp;o=1&amp;a=0596514824" alt="" />
which appeared on <a href="http://search.safaribooksonline.com/home">Safari</a> just before Christmas. I've been a fan of the Head Fist books ever since reading their best selling <a href="http://www.amazon.com/gp/product/0596007124?ie=UTF8&amp;tag=justinramelco-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596007124">Head First Design Patterns</a><img src="http://www.assoc-amazon.com/e/ir?t=justinramelco-20&amp;l=as2&amp;o=1&amp;a=0596007124" alt="" /> book. This particular book is aimed at beginners / hobbyists so I'm not exactly the target audience but hey it covers C# 3 so its got to be worth at least a skim.</p>

<p>I was pleased to see they've added a new feature to the head first series namely lab sections. There are 3 lab sections in the book which are basically specifications for mini games, the idea being the reader creates the games using their newly acquired C# skills. I though this was a great idea and having a lot of spare time in front of my laptop over the Christmas (due to a very <a href="http://justin.ramel.googlepages.com/ankle.jpg">sore ankle</a>) I did the first of the labs "A day at the races".</p>

<p>I used the lab as an exercise in <a href="http://behaviour-driven.org/">Behaviour Driven Development (BDD)</a> which I'd recently read about <a href="http://dannorth.net/introducing-bdd">here</a> and <a href="http://codebetter.com/blogs/david_laribee/archive/2007/12/17/approaching-bdd.aspx">here</a>. I also got to try out a Test Data Builder I'd read about <a href="http://nat.truemesh.com/archives/000714.html">here</a>. Now I'm not convinced I hit the nail on the head with the BDD as my solution wasn't created in a test behaviour first manor. This was mainly due to the fact the book provides you with the shell of a solution to keep things nice and simple for beginners. Never the less it was a good fun doing the lab it's a great way to try out new techniques.</p>

<p>All in all the BDD experience was pretty good not sure about the code duplication in the context setup but you got to love the way the descriptive contexts and method names combine to read like a sentence:</p>

<p><img src="http://justin.ramel.googlepages.com/bdd.gif" alt="" /></p>

<p>Also the Test Data Builder is a really flexible way to create test data using a fluent interface which again is really easy to read:</p>

<p><code>myGuy = new GuyBuilder().WithName("Joe").AndCash(50).Build();</code></p>

<p>You can download the solution <a href="http://justin.ramel.googlepages.com/lab01.zip">here</a>.</p>
]]></content>
  </entry>
  
</feed>
