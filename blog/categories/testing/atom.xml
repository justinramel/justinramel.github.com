<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | just ram]]></title>
  <link href="http://justinramel.github.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://justinramel.github.com/"/>
  <updated>2012-10-20T22:43:17+01:00</updated>
  <id>http://justinramel.github.com/</id>
  <author>
    <name><![CDATA[Justin Ramel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SAP Enterprise Portal + Automated Functional Testing - Part 7 of ...]]></title>
    <link href="http://justinramel.github.com/blog/2006/12/05/sap-enterprise-portal-automated-functional-testing-part-7-of/"/>
    <updated>2006-12-05T14:42:36+00:00</updated>
    <id>http://justinramel.github.com/blog/2006/12/05/sap-enterprise-portal-automated-functional-testing-part-7-of</id>
    <content type="html"><![CDATA[<p>In anticipation of posting about a new topic I'm going to wrap up my Watir Automated testing posts with a few more top tips.</p>

<p><strong>TOP TIP - How do I run a single test?</strong></p>

<p>So you have lots of tests in your test suite but only want to run one? No need to create an ad-hoc test case, simply pass in the <strong>--name</strong> parameter when running the test:</p>

<p><code>ruby test_mytestcase.rb --name test_just_this_method</code></p>

<p><strong>TOP TIP - How do I run the test in background mode?</strong></p>

<p>Running the test so you can see what is going on in the browser is sometimes useful but most of the time you'll want to run the tests in the background and just see the results. This is easily done by passing the <strong>-b</strong> parameter on the command line:</p>

<p><code>ruby test_mytestcase.rb -b</code></p>

<p><strong>TOP TIP - Helper methods</strong></p>

<p>I have a couple of helper methods which I use in most of my test cases:
`
def should_find(find_me)
  assert(@ie.contains_text(find_me), "<em>\n</em>\n<em>\nText not found: #{find_me}\n</em>\n<em>\n</em>")
end</p>

<p>def should_not_find(find_me)
  assert_nil(@ie.contains_text(find_me), "<em>\n</em>\n<em>\nFound text which should not be present: #{find_me}\n</em>\n<em>\n</em>")
end
<code>
No clever code here it just means I can write tests which are easier to read:
</code>
should_not_find("Portal Runtime Error")
should_find("Success")
`
<strong>FIN</strong>
Well I'm running out of content about testing as you can probably tell! So I guess thats a wrap. I'll no doubt re-visit automated testing again at some point but for now thats my lot.</p>

<p><strong>NEXT TIME</strong>
I've been working on creating web services for Enterprise Portal and calling those web services from Microsoft .Net. I've taken lots of notes, so expect a series of EP web services posts real soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby unit testing - run only one test]]></title>
    <link href="http://justinramel.github.com/blog/2006/12/05/ruby-unit-testing-run-only-one-test/"/>
    <updated>2006-12-05T12:25:16+00:00</updated>
    <id>http://justinramel.github.com/blog/2006/12/05/ruby-unit-testing-run-only-one-test</id>
    <content type="html"><![CDATA[<p>If you don't wish to run all the unit tests in your test case you can tell ruby to run only one by passing in the name of the test:</p>

<pre><code>  ruby test_mytestcase.rb --name test_just_this_method
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby testing - setup project folders]]></title>
    <link href="http://justinramel.github.com/blog/2006/12/05/ruby-testing-setup-project-folders/"/>
    <updated>2006-12-05T12:24:58+00:00</updated>
    <id>http://justinramel.github.com/blog/2006/12/05/ruby-testing-setup-project-folders</id>
    <content type="html"><![CDATA[<p>Its a good idea to keep your test cases seperate from your production code:</p>

<pre><code>  myproject
      lib/
          workomatic.rb
      test/
          test_workomatic.rb
</code></pre>

<p>When you have your project setup in this way add the following line to the top of your test cases:</p>

<p>Inside test_workomatic.rb</p>

<pre><code>  $:.unshift File.join(File.dirname(__FILE__), "..", "lib")
  require workomatic.rb
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SAP Enterprise Portal - Automated Functional Testing - Part 6 of ...]]></title>
    <link href="http://justinramel.github.com/blog/2006/10/27/automated-functional-testing-part-6-of/"/>
    <updated>2006-10-27T11:58:26+01:00</updated>
    <id>http://justinramel.github.com/blog/2006/10/27/automated-functional-testing-part-6-of</id>
    <content type="html"><![CDATA[<p>Time for some more tips. I had a comment on my last post asking how to navigate around the portal so lets start there.</p>

<p><strong>TOP TIP - How to navigate the portal</strong><br/>
So how do you navigate around the portal using the menu? Simple you don't! I found there are lots of problems using the portal menus due to the number of frames used so I simply jump directly to the URL of the PAR file I am testing. Here is a typical test:<br/>
`def test_typical</p>

<h1>My Helper method which logs in using the given user id and password</h1>

<p>logon("myuserid", "mypassword")</p>

<h1>Go directly to the URL of the PAR I want to test</h1>

<p>@ie.goto('http://portal:50000/irj/servlet/prt/portal/prtroot/uk.ac.ncl.testing.ISRPageProcessor')</p>

<h1>do tests here</h1>

<p>end`<br/>
Ok that's fine but how do you find the direct URL of the PAR file you want to test? Ahh thats were my next top tip comes in.</p>

<p><strong>TOP TIP - How to find the direct URL of a PAR file</strong><br/>
Open up the SAP Netweaver Developer Studio</p>

<p>Open your project</p>

<p>Open the file:<br/>
<code>MyPortalProject  
dist  
PORTAL-INF  
Portalapp.xml</code><br/>
You should now see a "Run…" button for each portal component in your project</p>

<p>Click the "Run…" button and the dev studio will open up a new browser window with the URL of your PAR file. Now simply use this URL in your test scripts.</p>

<p><strong>COMING UP IN PART SEVEN</strong><br/>
Short and sweet but at least I'm posting more often. Next time... You guessed it more top tips!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SAP Enterprise Portal - Automated Functional Testing - Part 5 of ...]]></title>
    <link href="http://justinramel.github.com/blog/2006/10/18/sap-enterprise-portal-functional-testing-part-5-of/"/>
    <updated>2006-10-18T12:13:13+01:00</updated>
    <id>http://justinramel.github.com/blog/2006/10/18/sap-enterprise-portal-functional-testing-part-5-of</id>
    <content type="html"><![CDATA[<p>Ok last time I promised some hints and tips so lets begin. I'm going to keep the hints and tips posts fairly short in the hope it will encourage me to post more often. I received a comment on my last post asking how I find the ID/Name attributes of my forms so I though that would be a good place to start.</p>

<p><strong>TOP TIP - How to find ID/Name attributes of a form<br/>
</strong>To save me having to sifting through the html code of a page for the ID/Name of a control I use the <a href="http://www.mozilla.com/firefox/">FireFox</a> browser with the <a href="https://addons.mozilla.org/firefox/60/">Web Developer Toolbar</a> extension installed. The <a href="https://addons.mozilla.org/firefox/60/">Web Developer Toolbar</a> is a great time saver not only for finding out form details but it has lots of other features too, I strongly recommend you check it out.</p>

<p>When you have the <a href="https://addons.mozilla.org/firefox/60/">Web Developer Toolbar</a> installed under the <strong>Forms menu</strong> you have the <strong>Display Form Details</strong> option, simply select this option and the page will be highlighted with yellow tags showing the ID/Name attributes of each item on the form.</p>

<p><strong>NOTE:</strong> Forms items which are created using HTMLB do not get a static ID/Name attribute these attributes appear to be generated each time the page is created. If this is the case how do we write tests against HTMLB forms? That's were the next top tip comes in...</p>

<p><strong>TOP TIP - Writing Watir test against HTMLB forms</strong><br/>
As I mentioned above HTMLB forms do not have a static ID/Name attribute, they are generated each time the page is created so you will find your HTMLB form controls will have an ID/Name of something along the lines of "htmlb_18528_htmlb_9998_3" if you then reload the page the ID/Name attributes will have changed i.e. "htmlb_18328_htmlb_9991_1". This means the following Watir test code would not work as each time the page reloaded the <em>:id</em> attribute would be different.</p>

<p><code>@ie.text_field(:id, 'htmlb_18528_htmlb_9998_3').set('test me')</code></p>

<p>So how do we get around this? Well the best way I have found is to use Watir's <em>:index</em> parameter when accessing form controls. The <em>:index</em> parameter works by sequentially counting form controls from left to right top to bottom. So to set the text of the second control on the page we use the following code:</p>

<p><code>@ie.text_field(:index, 2).set('test me')</code></p>

<p>This is not an ideal solution due to the fact if you change the layout of the page your index's will also change and break your tests. However I've been using this method for a while now and it's never been a major problem, besides I'm not sure how else it could be done!</p>

<p><strong>COMING UP IN PART SIX</strong><br/>
Well that post turned out to be slightly longer than I planned, so much for keeping these tips short. Next time more of the same.</p>
]]></content>
  </entry>
  
</feed>
