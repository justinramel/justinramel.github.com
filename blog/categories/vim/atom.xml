<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | just ram]]></title>
  <link href="http://justinramel.github.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://justinramel.github.com/"/>
  <updated>2012-09-20T23:11:24+01:00</updated>
  <id>http://justinramel.github.com/</id>
  <author>
    <name><![CDATA[Justin Ramel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vim tip: !mkdir %:h]]></title>
    <link href="http://justinramel.github.com/blog/2012/09/06/vim-tip-mkdir-percent-h/"/>
    <updated>2012-09-06T22:10:00+01:00</updated>
    <id>http://justinramel.github.com/blog/2012/09/06/vim-tip-mkdir-percent-h</id>
    <content type="html"><![CDATA[<p>I just subscribed to <a href="http://www.destroyallsoftware.com/">Destroy All Software</a>
as well as the great content, I'm picking up lots of vim tips. I'm having to
pause the video a lot, <a href="http://twitter.com/garybernhardt">Gary</a> is just too
damn fast. Any way I'm going to start writing these vim gems down in the vain
hope I'll remember some of them.</p>

<h2>Quickly creating a project structure</h2>

<p>It's possible to setup a new project without leaving vim. Lets create a new dir
for a quick demo:</p>

<p><code>
mkdir demo
cd demo
vim
</code></p>

<p>From the vim command prompt we can create a new user model in the models dir
using the vim command <code>:n models/user.rb</code></p>

<p><img src="/images/vim-tip-1/new-file.png"></p>

<p>Lets break this command down:</p>

<ul>
<li><strong>:n</strong>             - n is short for new as in file</li>
<li><strong>models/user.rb</strong> - the directory and name of our new file</li>
</ul>


<p>This creates the new file in a vim buffer but when we go to write this file we
get an error <code>E212: Can't open file for writing</code>, this is because the directory
models does not exist.</p>

<p><img src="/images/vim-tip-1/write-error.png"></p>

<p>We can create this directory right from the vim command prompt with <code>!mkdir %:h</code></p>

<p><img src="/images/vim-tip-1/mkdir-command.png"></p>

<p>Now the directory has been created we can write the new file from vim.</p>

<p>So what does the cryptic command <code>!mkdir %:h</code> actually mean? Let break it down:</p>

<ul>
<li><strong>:!</strong>    - Execute {command} with the shell</li>
<li><strong>mkdir</strong> - Make a directory shell command</li>
<li><strong>%:h</strong>   - The directory of the current file (in our case models)</li>
</ul>


<p>The full vim help text for <code>%:h</code>:</p>

<p>```
:h  Head of the file name (the last component and any separators</p>

<pre><code>removed).  Cannot be used with :e, :r or :t.
Can be repeated to remove several components at the end.
When the file name ends in a path separator, only the path
separator is removed.  Thus ":p:h" on a directory name results
on the directory name itself (without trailing slash).
When the file name is an absolute path (starts with "/" for
Unix; "x:\" for MS-DOS, WIN32, OS/2; "drive:" for Amiga), that
part is not removed.  When there is no head (path is relative
to current directory) the result is empty.
</code></pre>

<p>```</p>

<h2>Deeper folder structure</h2>

<p>You can create deeper folder structures using the same technique with one extra
switch on the mkdir command.</p>

<p><code>
:n specs/models/user_spec.rb
:!mkdir -p %:h
:w
</code></p>

<p>The <code>-p</code> switch will create the intermediate directories for you. If you don't
use this switch the command will fail.</p>

<p>The full command line help for the <code>mkdir -p</code> switch:</p>

<p><code>
-p  Create intermediate directories as required.  If this option is not
specified, the full path prefix of each operand must already exist.  On the
other hand, with this option specified, no error will be reported if a
directory given as an operand already exists.  Intermediate directories are
created with permission bits of rwxrwxrwx (0777) as modified by the current
umask, plus write and search permission for the owner.
</code></p>

<p>I think that's as much as I need to know about <code>:!mkdir %:h</code> for now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim-ruby-refactoring - Extract Method]]></title>
    <link href="http://justinramel.github.com/blog/2010/12/31/vim-ruby-refactoring-extract-method/"/>
    <updated>2010-12-31T01:32:57+00:00</updated>
    <id>http://justinramel.github.com/blog/2010/12/31/vim-ruby-refactoring-extract-method</id>
    <content type="html"><![CDATA[<p>This post is part of a <a href="http://justinram.wordpress.com/2010/12/30/vim-ruby-refactoring-series/">series</a> which documents the <a href="https://github.com/ecomba/vim-ruby-refactoring">vim-ruby-refactoring</a> plugin.</p>

<p><strong>IMPORTANT:</strong> As well as installing the <a href="https://github.com/ecomba/vim-ruby-refactoring">vim-ruby-refactoring</a> plugin, you must also install the <a href="http://www.vim.org/scripts/script.php?script_id=39">matchit.vim</a> plugin for this refactoring to work.</p>

<h4>Extract Method</h4>

<p>Extracts a selection into a method and places it above the current method.</p>

<p>The refactoring: <a href="http://www.refactoring.com/catalog/extractMethod.html">http://www.refactoring.com/catalog/extractMethod.html</a></p>

<h4>Example</h4>

<p>Before refactoring:   <br/>
<a href="http://justinram.files.wordpress.com/2010/12/extractmethod_before.png"><img src="http://justinram.files.wordpress.com/2010/12/extractmethod_before_thumb.png" alt="ExtractMethod_Before" /></a>    <br/>
Visually select lines you wish to extract    <br/>
Hit your <strong><leader-key></strong> then type <strong>rem     <br/>
</strong>You will now see a prompt to enter the new method name: <br/>
Method name: print_details</p>

<p>After refactoring:   <br/>
<a href="http://justinram.files.wordpress.com/2010/12/extractmethod_after.png"><img src="http://justinram.files.wordpress.com/2010/12/extractmethod_after_thumb.png" alt="ExtractMethod_After" /></a>    <br/>
A new method <strong><em>print_details</em></strong> has been added above the <strong>print_owing</strong> method containing the contents of the selected lines.</p>

<p><strong>rem</strong> is the default binding for this refactoring, think <strong>R</strong>efactor <strong>E</strong>xtract <strong>M</strong>ethod.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim-ruby-refactoring - Rename Instance Variable]]></title>
    <link href="http://justinramel.github.com/blog/2010/12/31/vim-ruby-refactoring-rename-instance-variable/"/>
    <updated>2010-12-31T01:14:03+00:00</updated>
    <id>http://justinramel.github.com/blog/2010/12/31/vim-ruby-refactoring-rename-instance-variable</id>
    <content type="html"><![CDATA[<p>This post is part of a <a href="http://justinram.wordpress.com/2010/12/30/vim-ruby-refactoring-series/">series</a> which documents the <a href="https://github.com/ecomba/vim-ruby-refactoring">vim-ruby-refactoring</a> plugin.</p>

<p><strong>IMPORTANT:</strong> As well as installing the <a href="https://github.com/ecomba/vim-ruby-refactoring">vim-ruby-refactoring</a> plugin, you must also install the <a href="http://www.vim.org/scripts/script.php?script_id=39">matchit.vim</a> plugin for this refactoring to work.</p>

<h4>Rename Instance Variable</h4>

<p>Renames the selected instance variable.</p>

<h4>Example</h4>

<p>Before refactoring:   <br/>
<a href="http://justinram.files.wordpress.com/2010/12/renameinstancevar_before.png"><img src="http://justinram.files.wordpress.com/2010/12/renameinstancevar_before_thumb.png" alt="RenameInstanceVar_Before" /></a>    <br/>
Visually select the instance variable you wish to rename    <br/>
Hit your <strong><leader-key></strong> then type <strong>rriv      <br/>
</strong>You will now see a prompt to enter the new variable name: <br/>
Rename to: new_name</p>

<p>After refactoring:   <br/>
<a href="http://justinram.files.wordpress.com/2010/12/renameinstancevar_after.png"><img src="http://justinram.files.wordpress.com/2010/12/renameinstancevar_after_thumb.png" alt="RenameInstanceVar_After" /></a>    <br/>
The instance variable <em><strong>@name</strong></em> has been renamed to <strong><em>@new_name</em></strong> in both locations within the class.</p>

<p><strong>rriv</strong> is the default binding for this refactoring, think <strong>R</strong>efactor <strong>R</strong>ename <strong>I</strong>nstance <strong>V</strong>ariable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim-ruby-refactoring - Rename Local Variable]]></title>
    <link href="http://justinramel.github.com/blog/2010/12/31/vim-ruby-refactoring-rename-local-variable/"/>
    <updated>2010-12-31T00:59:58+00:00</updated>
    <id>http://justinramel.github.com/blog/2010/12/31/vim-ruby-refactoring-rename-local-variable</id>
    <content type="html"><![CDATA[<p>This post is part of a <a href="http://justinram.wordpress.com/2010/12/30/vim-ruby-refactoring-series/">series</a> which documents the <a href="https://github.com/ecomba/vim-ruby-refactoring">vim-ruby-refactoring</a> plugin.</p>

<p><strong>IMPORTANT:</strong> As well as installing the <a href="https://github.com/ecomba/vim-ruby-refactoring">vim-ruby-refactoring</a> plugin, you must also install the <a href="http://www.vim.org/scripts/script.php?script_id=39">matchit.vim</a> plugin for this refactoring to work.</p>

<h4>Rename Local Variable</h4>

<p>Renames the selected local variable.</p>

<h4>Example</h4>

<p>Before refactoring:   <br/>
<a href="http://justinram.files.wordpress.com/2010/12/renamevar_before.png"><img src="http://justinram.files.wordpress.com/2010/12/renamevar_before_thumb.png" alt="RenameVar_Before" /></a>    <br/>
Visually select the local variable you wish to rename    <br/>
Hit your <strong><leader-key></strong> then type <strong>rrlv      <br/>
</strong>You will now see a prompt to enter the new variable name: <br/>
Rename to: is_mac_os</p>

<p>After refactoring:   <br/>
<a href="http://justinram.files.wordpress.com/2010/12/renamevar_after.png"><img src="http://justinram.files.wordpress.com/2010/12/renamevar_after_thumb.png" alt="RenameVar_After" /></a>    <br/>
The local variable <em><strong>mac_os</strong></em> has been renamed to <strong><em>is_mac_os</em></strong> in both locations within the method.</p>

<p><strong>rrlv</strong> is the default binding for this refactoring, think <strong>R</strong>efactor <strong>R</strong>ename <strong>L</strong>ocal <strong>V</strong>ariable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim-ruby-refactoring - Extract Local Variable]]></title>
    <link href="http://justinramel.github.com/blog/2010/12/31/vim-ruby-refactoring-extract-local-variable/"/>
    <updated>2010-12-31T00:27:45+00:00</updated>
    <id>http://justinramel.github.com/blog/2010/12/31/vim-ruby-refactoring-extract-local-variable</id>
    <content type="html"><![CDATA[<p>This post is part of a <a href="http://justinram.wordpress.com/2010/12/30/vim-ruby-refactoring-series/">series</a> which documents the <a href="https://github.com/ecomba/vim-ruby-refactoring">vim-ruby-refactoring</a> plugin.</p>

<h4>Extract Local Variable</h4>

<p>Extracts a visual selection into a local variable.</p>

<p>The refactoring: <a href="http://www.refactoring.com/catalog/introduceExplainingVariable.html">http://www.refactoring.com/catalog/introduceExplainingVariable.html</a></p>

<h4>Example</h4>

<p>Before refactoring:   <br/>
<a href="http://justinram.files.wordpress.com/2010/12/extractvar_before1.png"><img src="http://justinram.files.wordpress.com/2010/12/extractvar_before_thumb1.png" alt="ExtractVar_Before" /></a>    <br/>
Visually select the value you wish to extract    <br/>
Hit your <strong><leader-key></strong> then type <strong>relv      <br/>
</strong>You will now see a prompt to enter the variable name: <br/>
Variable name: mac_os</p>

<p>After refactoring:   <br/>
<a href="http://justinram.files.wordpress.com/2010/12/extractvar_after.png"><img src="http://justinram.files.wordpress.com/2010/12/extractvar_after_thumb.png" alt="ExtractVar_After" /></a>    <br/>
The value <strong><em>platform.upcase.include?(‘MAC’)</em></strong> has been extracted into a local variable <strong><em>mac_os</em></strong>.</p>

<p><strong>relv</strong> is the default binding for this refactoring, think <strong>R</strong>efactor <strong>E</strong>xtract <strong>L</strong>ocal <strong>V</strong>ariable.</p>
]]></content>
  </entry>
  
</feed>
